{"name": "Successful fill form", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '#state')).click\n\nReason: ElementClickInterceptedException: element click intercepted: Element <div class=\" css-2b097c-container\" id=\"state\">...</div> is not clickable at point (423, 883). Other element would receive the click: <iframe id=\"google_ads_iframe_/21849154601,22343295815/Ad.Plus-300x250_1\" name=\"google_ads_iframe_/21849154601,22343295815/Ad.Plus-300x250_1\" title=\"3rd party ad content\" width=\"922\" height=\"114\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\" aria-label=\"Advertisement\" tabindex=\"0\" allow=\"private-state-token-redemption;attribution-reporting\" data-load-complete=\"true\" data-google-container-id=\"7\" style=\"border: 0px; vertical-align: bottom; max-height: 30vh !important; overflow: hidden !important; display: block; margin: 0px auto;\"></iframe>\n  (Session info: chrome=128.0.6613.137)\nScreenshot: file:///Users/nikita/.selene/screenshots/1747922401619/1747922401619.png\nPageSource: file:///Users/nikita/.selene/screenshots/1747922401619/1747922401619.html", "trace": "fn = <selene.core.wait.Command object at 0x10e97b960>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n../../.venv/lib/python3.13/site-packages/selene/core/wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../.venv/lib/python3.13/site-packages/selene/core/wait.py:61: in __call__\n    return self._fn(entity)\n../../.venv/lib/python3.13/site-packages/selene/core/entity.py:525: in raw_click\n    element.locate().click()\n../../.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n../../.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10e9b8ad0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55808e32e013 \\\\u003Cunknown>\\\\n#21 0x55808e33debc \\\\u003Cunknown>\\\\n#22 0x7f230a3ecac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\" css-2b097c-container\" id=\"state\">...</div> is not clickable at point (423, 883). Other element would receive the click: <iframe id=\"google_ads_iframe_/21849154601,22343295815/Ad.Plus-300x250_1\" name=\"google_ads_iframe_/21849154601,22343295815/Ad.Plus-300x250_1\" title=\"3rd party ad content\" width=\"922\" height=\"114\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\" aria-label=\"Advertisement\" tabindex=\"0\" allow=\"private-state-token-redemption;attribution-reporting\" data-load-complete=\"true\" data-google-container-id=\"7\" style=\"border: 0px; vertical-align: bottom; max-height: 30vh !important; overflow: hidden !important; display: block; margin: 0px auto;\"></iframe>\nE         (Session info: chrome=128.0.6613.137)\nE       Stacktrace:\nE       #0 0x55808e33f0ca <unknown>\nE       #1 0x55808e00b2b0 <unknown>\nE       #2 0x55808e0617e6 <unknown>\nE       #3 0x55808e05f6ed <unknown>\nE       #4 0x55808e05d187 <unknown>\nE       #5 0x55808e05c02c <unknown>\nE       #6 0x55808e04f946 <unknown>\nE       #7 0x55808e07f902 <unknown>\nE       #8 0x55808e04f2f9 <unknown>\nE       #9 0x55808e07face <unknown>\nE       #10 0x55808e09de26 <unknown>\nE       #11 0x55808e07f6a3 <unknown>\nE       #12 0x55808e04d4f3 <unknown>\nE       #13 0x55808e04e4fe <unknown>\nE       #14 0x55808e305d7b <unknown>\nE       #15 0x55808e309d31 <unknown>\nE       #16 0x55808e2f1c85 <unknown>\nE       #17 0x55808e30a8a2 <unknown>\nE       #18 0x55808e2d6e1f <unknown>\nE       #19 0x55808e32de48 <unknown>\nE       #20 0x55808e32e013 <unknown>\nE       #21 0x55808e33debc <unknown>\nE       #22 0x7f230a3ecac3 <unknown>\n\n../../.venv/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nsetup_browser = <selene.core._browser.Browser object at 0x10e923d90>\n\n    @allure.title(\"Successful fill form\")\n    def test_successful(setup_browser):\n        browser = setup_browser\n        first_name = \"Alex\"\n        last_name = \"Egorov\"\n    \n        with allure.step(\"Open registrations form\"):\n            browser.open(\"https://demoqa.com/automation-practice-form\")\n            browser.element(\".practice-form-wrapper\").should(have.text(\"Student Registration Form\"))\n            browser.driver.execute_script(\"$('footer').remove()\")\n            browser.driver.execute_script(\"$('#fixedban').remove()\")\n    \n        with allure.step(\"Fill form\"):\n            browser.element(\"#firstName\").set_value(first_name)\n            browser.element(\"#lastName\").set_value(last_name)\n            browser.element(\"#userEmail\").set_value(\"alex@egorov.com\")\n            browser.element(\"#genterWrapper\").element(by.text(\"Other\")).click()\n            browser.element(\"#userNumber\").set_value(\"1231231230\")\n            # browser.element(\"#dateOfBirthInput\").click()\n            # browser.element(\".react-datepicker__month-select\").s(\"July\")\n            # browser.element(\".react-datepicker__year-select\").selectOption(\"2008\")\n            # browser.element(\".react-datepicker__day--030:not(.react-datepicker__day--outside-month)\").click()\n            browser.element(\"#subjectsInput\").send_keys(\"Maths\")\n            browser.element(\"#subjectsInput\").press_enter()\n            browser.element(\"#hobbiesWrapper\").element(by.text(\"Sports\")).click()\n            # browser.element(\"#uploadPicture\").uploadFromClasspath(\"img/1.png\")\n            browser.element(\"#currentAddress\").set_value(\"Some street 1\")\n>           browser.element(\"#state\").click()\n\ntest_registration_form.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../.venv/lib/python3.13/site-packages/selene/core/entity.py:540: in click\n    self.wait.for_(\n../../.venv/lib/python3.13/site-packages/selene/core/wait.py:150: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <selene.core.wait.Command object at 0x10e97b960>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=getattr(reason, \"msg\", str(reason)),\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    # TODO: should we have an option to turn on stacktrace logging?\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    # if it's a normal function, it should have __qualname__,\n                    # then use it, otherwise use str(fn)\n                    fn_name = getattr(\n                        fn,\n                        '__qualname__',\n                        getattr(fn, '__str__', lambda: str(fn))(),\n                    )\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn_name}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', '#state')).click\nE                   \nE                   Reason: ElementClickInterceptedException: element click intercepted: Element <div class=\" css-2b097c-container\" id=\"state\">...</div> is not clickable at point (423, 883). Other element would receive the click: <iframe id=\"google_ads_iframe_/21849154601,22343295815/Ad.Plus-300x250_1\" name=\"google_ads_iframe_/21849154601,22343295815/Ad.Plus-300x250_1\" title=\"3rd party ad content\" width=\"922\" height=\"114\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\" aria-label=\"Advertisement\" tabindex=\"0\" allow=\"private-state-token-redemption;attribution-reporting\" data-load-complete=\"true\" data-google-container-id=\"7\" style=\"border: 0px; vertical-align: bottom; max-height: 30vh !important; overflow: hidden !important; display: block; margin: 0px auto;\"></iframe>\nE                     (Session info: chrome=128.0.6613.137)\nE                   Screenshot: file:///Users/nikita/.selene/screenshots/1747922401619/1747922401619.png\nE                   PageSource: file:///Users/nikita/.selene/screenshots/1747922401619/1747922401619.html\n\n../../.venv/lib/python3.13/site-packages/selene/core/wait.py:148: TimeoutException"}, "steps": [{"name": "Open registrations form", "status": "passed", "start": 1747922410035, "stop": 1747922412440}, {"name": "Fill form", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '#state')).click\n\nReason: ElementClickInterceptedException: element click intercepted: Element <div class=\" css-2b097c-container\" id=\"state\">...</div> is not clickable at point (423, 883). Other element would receive the click: <iframe id=\"google_ads_iframe_/21849154601,22343295815/Ad.Plus-300x250_1\" name=\"google_ads_iframe_/21849154601,22343295815/Ad.Plus-300x250_1\" title=\"3rd party ad content\" width=\"922\" height=\"114\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\" aria-label=\"Advertisement\" tabindex=\"0\" allow=\"private-state-token-redemption;attribution-reporting\" data-load-complete=\"true\" data-google-container-id=\"7\" style=\"border: 0px; vertical-align: bottom; max-height: 30vh !important; overflow: hidden !important; display: block; margin: 0px auto;\"></iframe>\n  (Session info: chrome=128.0.6613.137)\nScreenshot: file:///Users/nikita/.selene/screenshots/1747922401619/1747922401619.png\nPageSource: file:///Users/nikita/.selene/screenshots/1747922401619/1747922401619.html\n\n", "trace": "  File \"/Users/nikita/PycharmProjects/lesson_11/tests/demoqa/test_registration_form.py\", line 39, in test_successful\n    browser.element(\"#state\").click()\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"/Users/nikita/PycharmProjects/lesson_11/.venv/lib/python3.13/site-packages/selene/core/entity.py\", line 540, in click\n    self.wait.for_(\n    ~~~~~~~~~~~~~~^\n        command.js.click(xoffset=xoffset, yoffset=yoffset)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ...<8 lines>...\n        )\n        ^\n    )\n    ^\n  File \"/Users/nikita/PycharmProjects/lesson_11/.venv/lib/python3.13/site-packages/selene/core/wait.py\", line 150, in for_\n    return self._decorator(self)(logic)(fn)\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^\n  File \"/Users/nikita/PycharmProjects/lesson_11/.venv/lib/python3.13/site-packages/selene/core/wait.py\", line 148, in logic\n    raise self._hook_failure(failure)\n"}, "start": 1747922412441, "stop": 1747922420628}], "start": 1747922410034, "stop": 1747922420637, "uuid": "b7f029f0-23f4-4b29-ba64-877a1cf4e56b", "historyId": "6fe5a9365b874ddd38dec6751b552478", "testCaseId": "6fe5a9365b874ddd38dec6751b552478", "fullName": "tests.demoqa.test_registration_form#test_successful", "labels": [{"name": "parentSuite", "value": "tests.demoqa"}, {"name": "suite", "value": "test_registration_form"}, {"name": "host", "value": "MacBook-Pro-Nikita.local"}, {"name": "thread", "value": "18102-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.demoqa.test_registration_form"}]}